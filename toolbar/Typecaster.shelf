<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="Typecaster" label="Typecaster">
    <memberTool name="typecaster_installerGUI"/>
    <memberTool name="typecaster_convertFontNode"/>
    <memberTool name="typecaster_fontSelectionUI"/>
  </toolshelf>

  <tool name="typecaster_installerGUI" label="Installer GUI" icon="PLASMA_App">
    <toolSubmenu>Typecaster/scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[from typecaster import installer
installer.launch_gui()]]></script>
  </tool>

  <tool name="typecaster_convertFontNode" label="Convert Font to Typecaster Font" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Typecaster/scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[from __future__ import annotations
import hou
kwargs:dict 
    
def parm_from_parm(dst_parm:hou.Parm|hou.ParmTuple, src_parm:hou.Parm|hou.ParmTuple, src_index=None, dst_index=None):
    dst_is_tuple = isinstance(dst_parm,hou.ParmTuple)
    src_is_tuple = isinstance(src_parm,hou.ParmTuple)
    if dst_is_tuple and dst_index is not None:
        dst_parm:hou.Parm = dst_parm[dst_index]
        dst_is_tuple = False
    
    if src_is_tuple and src_index is not None:
        src_parm:hou.Parm = src_parm[src_index]
        src_is_tuple = False
    
    if src_is_tuple and dst_is_tuple:
        for i, dst_parm in enumerate(dst_parm):
            try:
                dst_parm.setFromParm(src_parm[i])
            except IndexError:
                pass
    elif not src_is_tuple and not dst_is_tuple:
        dst_parm.setFromParm(src_parm)
    else:
        raise Exception(f"Unexpected case for setfromparm! Destination: {dst_parm}, Source: {src_parm}")


for node in hou.selectedNodes():
    node : hou.OpNode
    if node.type().name() == "font":
        parent_node: hou.OpNode = node.parent()
        parms = {}
        parms['pack_method'] = 1
        parms['leading_follow_spacing'] = 1
        parms['glyph_remove_inline'] = 0
        triggercallback = ('file',)

        hole = node.evalParm('hole')
        if hole != 1:
            parms['hole_method'] = 3

        tcnode: hou.OpNode = parent_node.createNode(node_type_name='typecaster_font')
        pos = node.position()
        pos_shifted = list(pos)
        pos_shifted[0] += 1.0
        pos_shifted[1] -= 0.5
        tcnode.setParms(parms)
        
        parm_from_parm( dst_parm=tcnode.parm('file'), src_parm=node.parm('file'))
        parm_from_parm( dst_parm=tcnode.parm('text'), src_parm=node.parm('text'))
        parm_from_parm( dst_parm=tcnode.parm('halign'), src_parm=node.parm('halign'))
        parm_from_parm( dst_parm=tcnode.parm('valign'), src_parm=node.parm('valign'))
        parm_from_parm( dst_parm=tcnode.parm('fontsize'), src_parm=node.parm('fontsize'))
        parm_from_parm( dst_parm=tcnode.parm('lod'), src_parm=node.parm('lod'))
        parm_from_parm( dst_parm=tcnode.parm('addattrib'), src_parm=node.parm('addattrib'))
        
        parm_from_parm( dst_parm=tcnode.parmTuple('t'), src_parm=node.parmTuple('t'))
        parm_from_parm( dst_parm=tcnode.parmTuple('r'), src_parm=node.parmTuple('r'))
        parm_from_parm( dst_parm=tcnode.parmTuple('s'), src_parm=node.parmTuple('s'))
        
        parm_from_parm( dst_parm=tcnode.parm('tracking'), src_parm=node.parmTuple('tracking')[0])
        parm_from_parm( dst_parm=tcnode.parm('leading') , src_parm=node.parmTuple('tracking')[1])
        
        for tgt in triggercallback:
            parm: hou.Parm = tcnode.parm(tgt)
            parm.pressButton()
            
        if kwargs.get('shiftclick',False):
            for connection in node.outputConnections():
                connection:hou.NodeConnection
                outnode:hou.OpNode = connection.outputNode()
                # This basic system currently doesn't handle dots or any other
                # unusual network stuff and will only work to connect one
                # hou.OpNode to another hou.OpNode.
                if outnode:
                    outnode.setInput(connection.outputIndex(), tcnode, 0)
                else:
                    print(f"Failed to create a connection for {tcnode}")
            tcnode.setPosition(pos)
            node.setPosition(pos_shifted)
            
            nodename = f"{node.name()}"
            # nodename_old = f"{nodename}_old"
            # node.setName( nodename_old, unique_name=True)
            node.destroy()
            tcnode.setName( nodename, unique_name=True)
            
        else:
            tcnode.setPosition(pos_shifted)
            
            nodename = f"tc_{node.name()}"
            tcnode.setName( nodename, unique_name=True)]]></script>
  </tool>

  <tool name="typecaster_fontSelectionUI" label="Font Selector" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou

selection = hou.selectedNodes()

if len(selection)==1:
    from typecaster.fontUI import FontSelector
    FontSelector(hou.ui.mainQtWindow(), selection[0])
else:
    hou.ui.displayMessage("Please select exactly one node!", severity=hou.severityType.Warning)]]></script>
  </tool>
</shelfDocument>
